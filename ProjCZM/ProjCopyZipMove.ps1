#
param ($InputFolder="", $ExcludeFolders="", $OutputFolder="", $USBTempBack="")
$OutputSuffixDefault ="-XF"
$ExcludeFoldersDefault="node_modules .next intermediates .gradle target"
$ExcludeNoneFlag="ExcludeNone"
$USBTempBackDefault = "E:\TempBack"
function Usage {
  param ($cmdName)
  Write-Host "CopyWoXF + ZipFldrWDtTm + Move OutputZipFile to USBTempBack + Move CopyWoXF OutputFolder to MayDeleteLater folder"`n
  Write-Host Usage: $cmdName Input-Folder-Name [Exclude-Folders-List Output-Folder-Name]`n
  Write-Host Exclude-Folders-List is a space separated list like: `"node_modules .next intermediates .gradle`"
  Write-Host Special value of $ExcludeNoneFlag can be passed as Exclude-Folders-List to not use exclude option at all [include all in copy]
  Write-Host "If Output folder name is not specified, it is generated by concatenating" $OutputSuffixDefault "to Input-Folder-Name."
  Write-Host "To skip optional parameters but specify a following parameter, use - (hyphen character) to skip"`n
}

$InputFolder = $InputFolder.trim()
if ( "" -eq $InputFolder  ) {
    Write-Error "Input folder not specified!"
    Usage $myInvocation.InvocationName
    exit 1
  }

# Special flag to not specify Exclude Directories option at all  
if ( $ExcludeNoneFlag -eq $ExcludeFolders )  {
    $ExcludeFolders = "" 
} elseif (( "" -eq $ExcludeFolders  ) -or ("-" -eq $ExcludeFolders)) {
    $ExcludeFolders = $ExcludeFoldersDefault
}

$len = $InputFolder.length
if ("\" -eq $InputFolder.substring($len-1,1)) {
  $InputFolder = $InputFolder.substring(0, $len-1)
  Write-Host "Input parameter (folder name) had trailing backslash which was stripped" 
}

If ( -not (Test-Path -path $InputFolder -PathType Container)) {
  If (Test-Path -path $InputFolder) {
    Write-Error "Parameter specified: '$InputFolder' is not a directory. Aborting!"
  } Else {
    Write-Error "Parameter specified: '$InputFolder' does not exist. Aborting!"
  }
  Usage $myInvocation.InvocationName
  exit 1
}

if (( "" -eq $OutputFolder  ) -or ("-" -eq $OutputFolder)) {
  $OutputFolder = $InputFolder + $OutputSuffixDefault
}
write-host "OutputFolder is:" $OutputFolder

If (Test-Path -path $OutputFolder) {
  Write-Host "Note that Output folder/directory: '$OutputFolder' already exists."
  Write-Host "Aborting for now. Later will consider move to MDL option"
  exit 1
} 

if (( "" -eq $USBTempBack  ) -or ("-" -eq $USBTempBack)) {
    $USBTempBack = $USBTempBackDefault
}
  
$Cmd ="robocopy '$InputFolder' '$OutputFolder' /XO /XX /TS /NDL "
if ("" -ne $ExcludeFolders) {
  $Cmd = $Cmd + "/XD $ExcludeFolders "
}

Write-Host "Copy command to be executed", `n
Write-Host $Cmd, `n

$Choices = [System.Management.Automation.Host.ChoiceDescription[]] @("&yes", "&no")
$Choice = $host.UI.PromptForChoice("", "Proceed?", $Choices, 1)

if (1 -eq $Choice)
{
    Write-Host "Aborted!"
    exit 1
}

Invoke-Expression $Cmd
Write-Host Above robocopy command finished execution.`n

$Cmd ="ZipFldrWDtTm $OutputFolder"
Write-Host "Zip command to be executed", `n
Write-Host $Cmd, `n

# $Choices = [System.Management.Automation.Host.ChoiceDescription[]] @("&yes", "&no")
# $Choice = $host.UI.PromptForChoice("", "Proceed?", $Choices, 1)

# if (1 -eq $Choice)
# {
#     Write-Host "Aborted!"
#     exit 1
# }

# Invoke-Expression $Cmd
$OutputZipFile = ZipFldrWDtTm $OutputFolder
Write-Host Above ZipFldrWDtTm command finished execution. OutputZipFile: $OutputZipFile `n

$MoveCmd = "Move-Item -Path $OutputZipFile -Destination $USBTempBack"
Write-Host "Move OutputZipFile Command to be executed:"`n
Write-Host $MoveCmd`n

$Choices = [System.Management.Automation.Host.ChoiceDescription[]] @("&yes", "&no")
$Choice = $host.UI.PromptForChoice("", "Proceed?", $Choices, 1)

if (1 -eq $Choice)
{
    Write-Host "Aborted!"
    exit 1
}

Invoke-Expression $MoveCmd
Write-Host Above Move-Item command finished execution. `n

$Cmd ="MoveToMDLWDtTm $OutputFolder"
Write-Host "Move initial copy command's OutputFolder to MayDeleteLater folder. Command to be executed", `n
Write-Host $Cmd, `n

# $Choices = [System.Management.Automation.Host.ChoiceDescription[]] @("&yes", "&no")
# $Choice = $host.UI.PromptForChoice("", "Proceed?", $Choices, 1)

# if (1 -eq $Choice)
# {
#     Write-Host "Aborted!"
#     exit 1
# }

Invoke-Expression $Cmd
Write-Host Above MoveToMDLWDtTm command finished execution.`n
