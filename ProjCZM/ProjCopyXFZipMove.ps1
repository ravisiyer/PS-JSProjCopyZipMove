#
param ($InputFolder="", $BackupFolder="")
# param ($InputFolder="", $ExcludeFolders="", $OutputFolder="", $BackupFolder="")
$BackupFolderDefault = "E:\TempBack"
$OutputSuffixDefault ="-XF"

function Usage {
  param ($cmdName)
  Write-Host "CopyWoXF + ZipFldrWDtTm + Move OutputZipFile to BackupFolder + Move CopyWoXF OutputFolder to MayDeleteLater folder"`n
  Write-Host Usage: $cmdName Input-Folder-Name [BackupFolder]
  Write-Host BackupFolder is the final copy location. By default it is: $BackupFolderDefault
  # Write-Host Usage: !!!!Exclude-Folders-List and Output-Folder-Name have not been tested so far!!!!`n
  # Write-Host Exclude-Folders-List is a space separated list like: `"node_modules .next intermediates .gradle`"
  # Write-Host Special value of $ExcludeNoneFlag can be passed as Exclude-Folders-List to not use exclude option at all [include all in copy]
  # Write-Host "If Output folder name is not specified, it is generated by concatenating" $OutputSuffixDefault "to Input-Folder-Name."
  Write-Host "To skip optional parameters but specify a following parameter, use - (hyphen character) to skip"`n
}

if ($InputFolder -eq "/?") { 
  Usage $myInvocation.InvocationName
  exit 0
}

if ( "" -eq $InputFolder  ) {
  write-error "Input folder not specified."
  Usage $myInvocation.InvocationName
  exit 1
}

if (( "" -eq $BackupFolder  ) -or ("-" -eq $BackupFolder)) {
    $BackupFolder = $BackupFolderDefault
}
$InputFolderLeaf = Split-Path -Path $InputFolder -Leaf
$InputFolderParent = Split-Path -Path $InputFolder -Parent
$NowDateTime = Get-Date -Format "yyyyMMdd-HHmm-"
if ("" -eq $InputFolderParent) {
  $OutputFolder = $NowDateTime + $InputFolderLeaf + $OutputSuffixDefault
} else {
  $OutputFolder = $InputFolderParent + "\" + $NowDateTime + $InputFolderLeaf + $OutputSuffixDefault
}

# CopyWoXF Usage: $cmdName Input-Folder-Name [Exclude-Folders-List MaxAge Output-Folder-Name LogFile]`n
$Cmd = "CopyWoXF $InputFolder - - $OutputFolder"
Write-Host "Executing:"
# Write-Host "Copy command to be executed", `n
Write-Host $Cmd

# $Choices = [System.Management.Automation.Host.ChoiceDescription[]] @("&yes", "&no")
# $Choice = $host.UI.PromptForChoice("", "Proceed?", $Choices, 1)

# if (1 -eq $Choice)
# {
#     Write-Host "Aborted!"
#     exit 1
# }

Invoke-Expression $Cmd
# Skipping checking exit code as CopyWoXF seems to return robocopy exit code which is not a simple
# success or failure code.
Write-Host "Above CopyWoXF command finished execution with exit code: $LastExitCode and `$?: $? ." `n

$Cmd ="ZipFldrWDtTm $OutputFolder N"
Write-Host "Executing:"
Write-Host $Cmd
Invoke-Expression $Cmd
Write-Host "Above ZipFldrWDtTm command finished execution with exit code: $LastExitCode and `$?: $? ." `n

$OutputZipFile = $OutputFolder + ".zip"
$MoveCmd = "Move-Item -Path $OutputZipFile -Destination $BackupFolder"
Write-Host "Move OutputZipFile command to be executed:"
Write-Host $MoveCmd

$Choices = [System.Management.Automation.Host.ChoiceDescription[]] @("&yes", "&no")
$Choice = $host.UI.PromptForChoice("", "Proceed (or skip)?", $Choices, 1)

if (1 -eq $Choice)
{
  Write-Host "Skipped!"
} else {
  Invoke-Expression $MoveCmd
  Write-Host "Above Move-Item command (run as Invoke-Expression) finished execution with exit code: $LastExitCode and `$?: $? ." `n
  # Write-Host Above Move-Item command finished execution. `n
}

$Cmd ="MoveToMDLWDtTm $OutputFolder N"
Write-Host "Executing:"
# Write-Host "Move initial copy command's OutputFolder to MayDeleteLater folder. Command to be executed", `n
Write-Host $Cmd

Invoke-Expression $Cmd
Write-Host "Above MoveToMDLWDtTm command finished execution with exit code: $LastExitCode and `$?: $? ." `n
# Write-Host Above MoveToMDLWDtTm command finished execution.`n
